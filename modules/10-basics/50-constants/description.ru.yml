---

name: Константы
theory: |

  Объявление констант в Go осуществляется при помощи ключевого слова `const` и имеет следующий общий вид:

  ```go
  const имя тип = выражение
  ```

  В качестве выражения для константы в Go могут использоваться только числа, символы, строки и булевые значения.

  Для именования констант также принято использовать CamelCase для экспортируемых констант и lowerCamelCase для неэкспортируемых констант.

  Например, константу целого типа можно определить так:

  ```go
  // объявление константы length целого типа со значением 100
  const length int = 100
  ```

  Объявление нескольких констант можно так же группировать:

  ```go
  const (
    weight int = 100
    height int = 100
  )
  ```
  
  Если у константы опустить тип, то он будет выведен в момент вычисления в зависимости от значения константы и требуемого типа.

  ```go
  package main

  import "fmt"

  const length = 100

  func main() {
    var count int64 = 10
    // в момент вычисления константа length примет тот же тип, что и переменная count, то есть int64
    fmt.Println(length * count) 
  }

  ```

  Объявление констант при помощи ключевого слова `const` можно делать как на уровне пакета, так и на уровне функции, например:

  ```go
  package main

  import "fmt"

  const height = 100
  
  func main() {
    const weight = 100
    fmt.Println(weight, height)
  }
  ```

  В Go существует удобный способ объявления целочисленных констант - `iota`. Он позволяет создавать последовательные целочисленные константы начиная с нуля, про `iota` можно почитать отдельно по ссылке ниже в советах.

instructions: |
  Объявите две константы `weight` и `height` со значением 100 и 200. Выведите произведение этих констант на экран.

tips:
  - |
    [The Go Programming Language Specification - Constants](https://golang.org/ref/spec#Constants)
  - |
    [Effective Go - Constants](https://golang.org/doc/effective_go.html#constants)
  - |
    [The Go Programming Language Specification - Iota](https://golang.org/ref/spec#Iota)
  - |
    [Go Wiki - Iota](https://github.com/golang/go/wiki/Iota)
