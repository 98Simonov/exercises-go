---

name: Методы структур
theory: |

  В Go нет классов, но существуют структуры с методами. Метод — это функция с дополнительным аргументом, который указывается в скобках между `func` и названием функции:

  ```go
  package main

  import (
  	"fmt"
  )

  type Dog struct{}

  // сначала объявляется дополнительный аргумент "(d Dog)", а следом идет обычное описание функции
  func (d Dog) Bark() {
  	fmt.Println("woof!")
  }

  func main() {
  	d := Dog{}
  	d.Bark() // woof!
  }
  ```

  В примере выше структура *Dog* передается по значению, то есть копируется. Если изменятся любые свойства внутри метода *Bark*, они останутся неизменными в исходной структуре:

  ```go
  package main

  import (
  	"fmt"
  )

  type Dog struct {
  	IsBarked bool
  }

  func (d Dog) Bark() {
  	fmt.Println("woof!")
  	d.IsBarked = true
  }

  func main() {
  	d := Dog{}
  	d.Bark() // woof!

  	fmt.Println(d.IsBarked) // false
  }
  ```

  Если есть необходимость в изменении состояния, структура должна передаваться указателем:

  ```go
  package main

  import (
  	"fmt"
  )

  type Dog struct {
  	IsBarked bool
  }

  func (d *Dog) Bark() {
  	fmt.Println("woof!")
  	d.IsBarked = true
  }

  func main() {
  	d := &Dog{}
  	d.Bark() // woof!

  	fmt.Println(d.IsBarked) // true
  }
  ```

instructions: |

  Реализуйте методы структуры `Counter`, представляющую собой счётчик, хранящий *неотрицательное целочисленное значение* и позволяющий это значение изменять:

  - метод `Inc(delta int)` должен увеличивать текущее значение на `delta` единиц (на 1 по умолчанию),
  - метод `Dec(delta int)` должен уменьшать текущее значение на `delta` единиц.

  ```go
  c := Counter{}
  c.Inc(0)
  c.Inc(0)
  c.Inc(40)
  c.Value // 42

  c.Dec(0)
  c.Dec(30)
  c.Value // 11

  c.Dec(100)
  c.Value // 0
  ```

tips:
  - |
    [The Go Programming Language Specification — Method Declarations](https://golang.org/ref/spec#Method_declarations)
